# -*- coding: utf-8 -*- 
import telebot
from telebot import types
import logging
import requests
import tg_analytic

bot = telebot.TeleBot('—Ç–æ–∫–µ–Ω');

@bot.message_handler(commands=['start'])
def handle_grammar2(m):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    users = types.KeyboardButton(u'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    commands = types.KeyboardButton(u'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1 –∫–æ–º–∞–Ω–¥—ã')
    pussy = types.KeyboardButton(u'üêàpussy')
    pidor = types.KeyboardButton(u'üè≥Ô∏è‚Äçüåàpidor_stat')
    help = types.KeyboardButton(u'üÜò–ü–æ–º–æ—â—å')
    allstatistics = types.KeyboardButton(u'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã')
    keyboard.row(pussy, pidor, help)
    keyboard.add(users, commands, allstatistics)
    tg_analytic.statistics (m.chat.id, m.text)
    bot.send_message(m.from_user.id, u'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=keyboard)

@bot.inline_handler(lambda query: query.query == u'pussy')
def query_photo(inline_query):
    try:
        r = types.InlineQueryResultPhoto('1',
                                          'https://sun9-26.userapi.com/c855328/v855328338/241690/QVaGg9fPkuk.jpg',
                                          'https://sun9-26.userapi.com/c855328/v855328338/241690/QVaGg9fPkuk.jpg')
        bot.answer_inline_query(inline_query.id, [r], cache_time=1)
    except Exception as e:
        print(e)     

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
 #if message.text[:10] == '/–ø–æ–º–æ—â—å' or message.text[:20] == '/help@pixelsetup_bot' or message.text[:30] == '/help':
   #tg_analytic.statistics (message.chat.id, message.text)
   #bot.send_message(message.chat.id, u"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /–Ω–æ–≤–æ—Å—Ç–∏ /–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è /–ø–æ–º–æ—â—å")
 if message.text == u'/–ø–æ–º–æ—â—å' or message.text == u'/help@pixelsetup_bot' or message.text == u'/help' or message.text == u'üÜò–ü–æ–º–æ—â—å':
   tg_analytic.statistics (message.chat.id, message.text)
   bot.send_message(message.chat.id, u"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /–∫–∏—Å–∫–∏ /–ø–æ–º–æ—â—å")  
 #if message.text[:40] == u'/–Ω–æ–≤–æ—Å—Ç–∏' or message.text[:50] == u'/news@pixelsetup_bot' or message.text[:60] == u'/news':
   #tg_analytic.statistics (message.chat.id, message.text)
   #bot.send_message(message.chat.id, u"IP SAMP RP —Å–µ—Ä–≤–µ—Ä–∞ —Å–º–µ–Ω–∏–ª—Å—è 34.91.233.9:7777!")  
 #if message.text[:70] == u'/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' or message.text[:80] == u'/info@pixelsetup_bot' or message.text[:90] == u'/info':
   #tg_analytic.statistics (message.chat.id, message.text)
   #bot.send_message(message.chat.id, u"–û—Ç–∫—Ä—ã—Ç SAMP RP –°–µ—Ä–≤–µ—Ä! IP: 34.91.233.9:7777 –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: –ù–∞—à —Å–∞–π—Ç - laciamemeframe.space (–°–∞–π—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —Å–∞–π—Ç —Å–∞–º–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ). –§–æ—Ä—É–º - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ì—Ä—É–ø–ø–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ - https://vk.com/pixsetup, –°–≤–æ–±–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. IP: 34.91.233.9:7777")
 if message.text == u'/pidor_stat' or message.text == u'/pidor_stat@pixelsetup_bot' or message.text == u'üè≥Ô∏è‚Äçüåàpidor_stat':
    tg_analytic.statistics (message.chat.id, message.text)
    bot.send_message(message.chat.id, u"–ø—Ä–∏–≤–µ—Ç –ø–∏–¥–æ—Ä")
 if message.text == u'/–∫–∏—Å–∫–∏' or message.text == u'/pussy' or message.text == u'/pussy@pixelsetup_bot' or message.text == u'üêàpussy' or message.text == u'–∫–∏—Å–∫–∏':  
    url = 'https://api.thecatapi.com/v1/images/search'
    r = requests.get(url, allow_redirects=True)
    r.headers['x-api-key'] = '—Ç–æ–∫–µ–Ω'
    json = r.json()
    for j in json:
      kittyurl = j['url']
      rs = requests.get(kittyurl, allow_redirects=True)
      open('kotik.jpg', 'wb').write(rs.content)
      tg_analytic.statistics (message.chat.id, message.text)
      bot.send_photo(message. chat.id, open("kotik.jpg","rb"))
 if message.text[:10] == u'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or message.text[:10] == u'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        st = message.text.split(' ')
        if 'txt' in st or '—Ç—Ö—Ç' in st:
            tg_analytic.analysis(st,message.chat.id)
            with open('%s.txt' %message.chat.id ,'r',encoding='UTF-8') as file:
                tg_analytic.statistics (message.chat.id, message.text)
                bot.send_document(message.chat.id,file)
                tg_analytic.remove(message.chat.id)
        else:
            messages = tg_analytic.analysis(st,message.chat.id)
            tg_analytic.statistics (message.chat.id, message.text)
            bot.send_message(message.chat.id, messages)         
 #elif message.text =="/help":
   #bot.send_message(message.from_user.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã  /news –∏ /info")
 #else:
    #bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")
bot.polling(none_stop=True, interval=0)
